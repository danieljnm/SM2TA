package danieljnm.sm2ta;

import danieljnm.sm2ta.StateMachine.StateMachine;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

@SuppressWarnings("all")
public class XmlTranslationTest {
  private StateMachine stateMachine;

  @BeforeEach
  public void reset() {
    StateMachine _stateMachine = new StateMachine();
    this.stateMachine = _stateMachine;
  }

  @Test
  public void emptyMachine() {
    this.stateMachine.name("test");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<nta>");
    _builder.newLine();
    _builder.append("<declaration>");
    _builder.newLine();
    _builder.append("</declaration>");
    _builder.newLine();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<name>test</name>");
    _builder.newLine();
    _builder.append("</template>");
    _builder.newLine();
    _builder.append("<system>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("test");
    _builder.newLine();
    _builder.append("</system>");
    _builder.newLine();
    _builder.append("</nta>");
    _builder.newLine();
    final String xml = _builder.toString();
    Assertions.assertEquals(xml, this.stateMachine.toXml());
  }

  @Test
  public void states() {
    this.stateMachine.name("test").state("one").initial().state("two");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<nta>");
    _builder.newLine();
    _builder.append("<declaration>");
    _builder.newLine();
    _builder.append("</declaration>");
    _builder.newLine();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<name>test</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<location id=\"one\" x=\"0\" y=\"0\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<name x=\"-15\" y=\"15\">one</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</location>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<location id=\"two\" x=\"200\" y=\"0\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<name x=\"185\" y=\"15\">two</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</location>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<init ref=\"one\"/>");
    _builder.newLine();
    _builder.append("</template>");
    _builder.newLine();
    _builder.append("<system>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("test");
    _builder.newLine();
    _builder.append("</system>");
    _builder.newLine();
    _builder.append("</nta>");
    _builder.newLine();
    final String xml = _builder.toString();
    Assertions.assertEquals(xml, this.stateMachine.toXml());
  }

  @Test
  public void transitions() {
    this.stateMachine.name("test").state("one").initial().transition("two").guard("false").when("test").transition("two").guard("true").when("test").state("two").transition("three").timeout(5).signal("finish");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<nta>");
    _builder.newLine();
    _builder.append("<declaration>");
    _builder.newLine();
    _builder.append("clock gen_clock;");
    _builder.newLine();
    _builder.append("chan test, finish;");
    _builder.newLine();
    _builder.append("</declaration>");
    _builder.newLine();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<name>test</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<location id=\"one\" x=\"0\" y=\"0\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<name x=\"-15\" y=\"15\">one</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</location>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<location id=\"two\" x=\"200\" y=\"0\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<name x=\"185\" y=\"15\">two</name>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"invariant\" x=\"185\" y=\"30\">gen_clock &lt;= 5</label>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</location>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<location id=\"three\" x=\"400\" y=\"0\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<name x=\"385\" y=\"15\">three</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</location>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<init ref=\"one\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<transition>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<source ref=\"one\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<target ref=\"two\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"guard\" x=\"-15\" y=\"30\">0</label>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"synchronisation\" x=\"-15\" y=\"45\">test?</label>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"assignment\" x=\"-15\" y=\"60\">gen_clock := 0</label>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</transition>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<transition>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<source ref=\"one\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<target ref=\"two\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"guard\" x=\"-15\" y=\"75\">1</label>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"synchronisation\" x=\"-15\" y=\"90\">test?</label>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"assignment\" x=\"-15\" y=\"105\">gen_clock := 0</label>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</transition>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<transition>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<source ref=\"two\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<target ref=\"three\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"guard\" x=\"185\" y=\"45\">gen_clock &gt;= 5</label>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"synchronisation\" x=\"185\" y=\"60\">finish!</label>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</transition>");
    _builder.newLine();
    _builder.append("</template>");
    _builder.newLine();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<name>gen_sync_finish</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<location id=\"initSync\" x=\"0\" y=\"0\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<name x=\"-15\" y=\"15\">initSync</name>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</location>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<init ref=\"initSync\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<transition>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<source ref=\"initSync\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<target ref=\"initSync\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label kind=\"synchronisation\" x=\"-15\" y=\"30\">finish?</label>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</transition>");
    _builder.newLine();
    _builder.append("</template>");
    _builder.newLine();
    _builder.append("<system>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("test, gen_sync_test, gen_sync_finish");
    _builder.newLine();
    _builder.append("</system>");
    _builder.newLine();
    _builder.append("</nta>");
    _builder.newLine();
    final String uppaal = _builder.toString();
    InputOutput.<String>println(this.stateMachine.toXml());
    Assertions.assertEquals(uppaal, this.stateMachine.toXml());
  }
}
